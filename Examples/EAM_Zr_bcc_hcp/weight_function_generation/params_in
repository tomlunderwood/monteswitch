init_lattice=                            1               #  We start the simulation in bcc, though it doesn't matter
M_grid_size=                             100             #  Divide the order parameter range into 100 macrostates
M_grid_min=                              -82.0           #  Set the order parameter range to that determined from our preliminary simulations
M_grid_max=                              48.0            #  (see above)
enable_multicanonical=                   T               #  Enable multicanonical sampling
beta=                                    9.403
P=                                       0.0
enable_lattice_moves=                    T               #  Enable lattice-switch moves
enable_part_moves=                       T
enable_vol_moves=                        T
part_select=                             "rand"
part_step=                               0.3             #  part_step is informed by our preliminary simulations
enable_COM_frame=                        T
vol_dynamics=                            "UVM"
vol_freq=                                1
vol_step=                                0.03            #  vol_step is informed by our preliminary simulations
stop_sweeps=                             160000          #  Perform 160000 sweeps, which corresponds to 40000 per MPI thread since we use 4 threads
equil_sweeps=                            0
enable_melt_checks=                      T
melt_sweeps=                             100
melt_threshold=                          3.0
melt_option=                             "zero_current"
enable_divergence_checks=                T
divergence_sweeps=                       100
divergence_tol=                          1.0E-7
output_file_period=                      250             #  Output data to stdout every 250 sweeps
output_file_Lx=                          T
output_file_Ly=                          T
output_file_Lz=                          T
output_file_V=                           T
output_file_R_1=                         F
output_file_R_2=                         F
output_file_u=                           F
output_file_lattice=                     T
output_file_E=                           T
output_file_M=                           T
output_file_macro=                       F
output_file_eta=                         T
output_file_moves_lattice=               F
output_file_accepted_moves_lattice=      F
output_file_moves_part=                  F
output_file_accepted_moves_part=         F
output_file_moves_vol=                   F
output_file_accepted_moves_vol=          F
output_file_rejected_moves_M_OOB=        F
output_file_M_OOB_high=                  F
output_file_M_OOB_low=                   F
output_file_barrier_macro_low=           T
output_file_barrier_macro_high=          F
output_file_rejected_moves_M_barrier=    F
output_file_moves_since_lock=            F
output_file_melts=                       F
output_file_equil_DeltaF=                F
output_file_sigma_equil_DeltaF=          F
output_file_equil_H_1=                   F
output_file_sigma_equil_H_1=             F
output_file_equil_H_2=                   F
output_file_sigma_equil_H_2=             F
output_file_equil_V_1=                   F
output_file_sigma_equil_V_1=             F
output_file_equil_V_2=                   F
output_file_sigma_equil_V_2=             F
output_file_equil_umsd_1=                F
output_file_sigma_equil_umsd_1=          F
output_file_equil_umsd_2=                F
output_file_sigma_equil_umsd_2=          F
output_file_equil_L_1=                   F
output_file_sigma_equil_L_1=             F
output_file_equil_L_2=                   F
output_file_sigma_equil_L_2=             F
output_stdout_period=                    -1              #  Suppress output to stdout
output_stdout_Lx=                        T
output_stdout_Ly=                        T
output_stdout_Lz=                        T
output_stdout_V=                         T
output_stdout_R_1=                       F
output_stdout_R_2=                       F
output_stdout_u=                         F
output_stdout_lattice=                   T
output_stdout_E=                         T
output_stdout_M=                         T
output_stdout_macro=                     F
output_stdout_eta=                       T
output_stdout_moves_lattice=             T
output_stdout_accepted_moves_lattice=    T
output_stdout_moves_part=                T
output_stdout_accepted_moves_part=       T
output_stdout_moves_vol=                 T
output_stdout_accepted_moves_vol=        T
output_stdout_rejected_moves_M_OOB=      T
output_stdout_M_OOB_high=                T
output_stdout_M_OOB_low=                 T
output_stdout_barrier_macro_low=         F
output_stdout_barrier_macro_high=        F
output_stdout_rejected_moves_M_barrier=  F
output_stdout_moves_since_lock=          F
output_stdout_melts=                     T
output_stdout_equil_DeltaF=              T
output_stdout_sigma_equil_DeltaF=        T
output_stdout_equil_H_1=                 T
output_stdout_sigma_equil_H_1=           T
output_stdout_equil_H_2=                 T
output_stdout_sigma_equil_H_2=           T
output_stdout_equil_V_1=                 T
output_stdout_sigma_equil_V_1=           T
output_stdout_equil_V_2=                 T
output_stdout_sigma_equil_V_2=           T
output_stdout_equil_umsd_1=              F
output_stdout_sigma_equil_umsd_1=        F
output_stdout_equil_umsd_2=              F
output_stdout_sigma_equil_umsd_2=        F
output_stdout_equil_L_1=                 F
output_stdout_sigma_equil_L_1=           F
output_stdout_equil_L_2=                 F
output_stdout_sigma_equil_L_2=           F
checkpoint_period=                       2000            #  Checkpoint the simulation every 2000 sweeps
update_eta=                              T               #  Update/generate the weight function
update_eta_sweeps=                       2000            #  Update the weight function every 2000 sweeps
update_trans=                            T               #  Update the transition matrix: required for the shooting method
update_eta_method=                       "shooting"      #  Update the weight function using the shooting method (which uses the transition matrix)
enable_barriers=                         T               #  Use macrostate barriers
barrier_dynamics=                        "pong_down"     #  Use the barriers to sweep the system through macrostates - moving to lower macrostates first
lock_moves=                              38400           #  Lock the system into each macrostate for 38400 moves (~ 100 sweeps)
calc_equil_properties=                   T
block_sweeps=                            57500
